# views.py
from django.shortcuts import render
from PIL import Image
import zipfile
from django.core.files.base import ContentFile
from django.http import FileResponse
from django.http import HttpResponse
from django.http import JsonResponse
from django.shortcuts import redirect
from azure.storage.blob import BlobServiceClient


from .forms import UploadFileForm


BLOB_SERVICE_CLIENT = BlobServiceClient.from_connection_string(
    "DefaultEndpointsProtocol=https;AccountName=infosecproject;AccountKey=6EW+653lTWwuhUWw0NhkDgpY1aQ7w4N6awnUWpQIci/5UHFiHhlbcOpxwS1B0FdHewraUzadrmXb+AStdIfAKg==;EndpointSuffix=core.windows.net"
)

CONTAINER_NAME = "isprojectcontainer"


def upload_to_azure_blob(file, blob_name):
    """
    This function uploads a file to Azure Blob Storage.

    Parameters:
    file (File): The file to upload.
    file_name (str): The name of the file.

    Returns:
    None
    """
    try:
        container_client = BLOB_SERVICE_CLIENT.get_container_client(CONTAINER_NAME)
        blob_client = container_client.get_blob_client(blob=blob_name)
        blob_client.upload_blob(file)
        print(f"File {blob_name} uploaded successfully to Azure Blob Storage!")
    except Exception as e:
        print(f"Error uploading file to Azure Blob Storage: {e}")


def upload_file(request):
    """This function handles POST requests to upload files."""
    if request.method == "POST":
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            image_file = request.FILES.get("image")
            executable_file = request.FILES.get("executable")

            upload_to_azure_blob(image_file, image_file.name)
            upload_to_azure_blob(executable_file, executable_file.name)
            obfuscate_images(image_file, executable_file)

    else:
        form = UploadFileForm()

    return render(request, "core/obfuscator.html", {"form": form})


# Create your views here.


def index(request):
    """This function handles GET requests to the index page."""
    return render(request, "core/index.html")


def obfuscator(request):
    """This function handles GET requests to the obfuscator page."""
    return render(request, "core/obfuscator.html")


def deobfuscator(request):
    """This function handles GET requests to the deobfuscator page."""
    return render(request, "core/deobfuscator.html")


def obfuscate_images(image_blob_name, executable_blob_name):
    """This function obfuscates images and uploads them to Azure Blob Storage.

    Parameters:
    image_blob_name (str): The name of the image blob.
    executable_blob_name (str): The name of the executable blob.

    Returns:
    new_image_data: The obfuscated image data.
    """
    try:
        # Create BlobServiceClient with the connection string
        blob_service_client = BlobServiceClient.from_connection_string(
            conn_str="DefaultEndpointsProtocol=https;AccountName=infosecproject;AccountKey=6EW+653lTWwuhUWw0NhkDgpY1aQ7w4N6awnUWpQIci/5UHFiHhlbcOpxwS1B0FdHewraUzadrmXb+AStdIfAKg==;EndpointSuffix=core.windows.net"
        )

        # Create BlobClients for reading image and executable from Azure Blob Storage
        image_blob_client = blob_service_client.get_blob_client(
            container=CONTAINER_NAME, blob=image_blob_name
        )
        executable_blob_client = blob_service_client.get_blob_client(
            container=CONTAINER_NAME, blob=executable_blob_name
        )

        # Download content of the image blob
        image_data = image_blob_client.download_blob().readall()
        print(image_blob_name)

        # Download content of the executable blob
        executable_data = executable_blob_client.download_blob().readall()
        delimiter = b"---EXECUTABLE_BOUNDARY---"
        # Append the executable data to the image data
        new_image_data = image_data + delimiter + executable_data

        # Create BlobClient for writing the obfuscated image to Azure Blob Storage
        obfuscated_blob_name = f"{image_blob_name}_OBFUSCATED.jpg"
        obfuscated_blob_client = blob_service_client.get_blob_client(
            container=CONTAINER_NAME, blob=obfuscated_blob_name
        )

        # Upload the obfuscated data to Azure Blob Storage
        obfuscated_blob_client.upload_blob(new_image_data, overwrite=True)

        print(
            f"File {obfuscated_blob_name} obfuscated and uploaded successfully to Azure Blob Storage!"
        )

        return new_image_data
    except Exception as e:
        print(f"Error obfuscating file: {e}")


def upload_deobfuscated_files(request):
    """
    This function handles POST requests to upload deobfuscated files.

    Parameters:
    request (HttpRequest): The HTTP request.

    Returns:
    None
    """
    if request.method == "POST":
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            image_file = request.FILES.get("image")
            executable_file = request.FILES.get("executable")

            upload_to_azure_blob(image_file, image_file.name)
            upload_to_azure_blob(executable_file, executable_file.name)
            processed_file_content = obfuscate_images(
                image_file.name, executable_file.name
            )

            if processed_file_content is not None:
                # Set the content type and disposition headers for the download
                response = HttpResponse(
                    processed_file_content, content_type="application/octet-stream"
                )
                response[
                    "Content-Disposition"
                ] = f"attachment; filename={image_file.name}_OBFUSCATED.jpg"

                return response
            else:
                # Handle the case where processing failed
                return HttpResponse("Error processing file", status=500)
        else:
            print(form.errors)

    return redirect("deobfuscator")


def upload_obfuscated_file(request):
    """
    This function handles POST requests to upload obfuscated files.
    """
    if request.method == "POST":
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            obfuscated_file = request.FILES.get("image")
            deobfuscated_image_data, deobfuscated_executable_data = deobfuscate_images(
                obfuscated_file.name
            )

            if (
                deobfuscated_image_data is not None
                and deobfuscated_executable_data is not None
            ):
                zip_buffer = io.BytesIO()


            else:
                # Handle the case where processing failed
                return HttpResponse("Error processing file", status=500)
        else:
            print(form.errors)

    return redirect("deobfuscator")


def deobfuscate_images(obfuscated_blob_name):
    """
    This function deobfuscates images and uploads them to Azure Blob Storage.
    """
    try:
        # Create BlobClient for reading the obfuscated image from Azure Blob Storage
        obfuscated_blob_client = BLOB_SERVICE_CLIENT.get_blob_client(
            container=CONTAINER_NAME, blob=obfuscated_blob_name
        )

        # Download content of the obfuscated blob
        obfuscated_data = obfuscated_blob_client.download_blob().readall()

        # Use a delimiter to separate image and executable data
        delimiter = b"---EXECUTABLE_BOUNDARY---"
        delimiter_index = obfuscated_data.find(delimiter)

        # Extract the original image data and executable data
        image_data = obfuscated_data[:delimiter_index]
        executable_data = obfuscated_data[delimiter_index + len(delimiter) :]

        # Extract the original image name and extension
        image_name, image_extension = obfuscated_blob_name.split("_OBFUSCATED.")

        # Create BlobClient for writing the deobfuscated image and executable to Azure Blob Storage
        deobfuscated_image_blob_name = f"{image_name}.{image_extension}"
        deobfuscated_executable_blob_name = f"{image_name}_EXECUTUTABLE.exe"

        deobfuscated_image_blob_client = BLOB_SERVICE_CLIENT.get_blob_client(
            container=CONTAINER_NAME, blob=deobfuscated_image_blob_name
        )
        deobfuscated_executable_blob_client = BLOB_SERVICE_CLIENT.get_blob_client(
            container=CONTAINER_NAME, blob=deobfuscated_executable_blob_name
        )

        # Upload the deobfuscated data to Azure Blob Storage
        deobfuscated_image_blob_client.upload_blob(image_data, overwrite=True)
        deobfuscated_executable_blob_client.upload_blob(executable_data, overwrite=True)

        print(
            f"File {deobfuscated_image_blob_name} and {deobfuscated_executable_blob_name} deobfuscated and uploaded successfully to Azure Blob Storage!"
        )

        return image_data, executable_data

    except Exception as e:
        print(f"Error deobfuscating file: {e}")
