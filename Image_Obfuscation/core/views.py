# views.py
from django.shortcuts import render
from PIL import Image
from django.http import HttpResponse
from azure.storage.blob import BlobServiceClient, ContainerClient
from azure.storage.blob import BlobClient


from .forms import UploadFileForm


BLOB_SERVICE_CLIENT = BlobServiceClient.from_connection_string(
    "DefaultEndpointsProtocol=https;AccountName=infosecproject;AccountKey=6EW+653lTWwuhUWw0NhkDgpY1aQ7w4N6awnUWpQIci/5UHFiHhlbcOpxwS1B0FdHewraUzadrmXb+AStdIfAKg==;EndpointSuffix=core.windows.net"
)

CONTAINER_NAME = "isprojectcontainer"


def check_azure_connection():
    try:
        # Attempt to list containers to verify the connection
        containers = list(BLOB_SERVICE_CLIENT.get_service_properties())
        print("Azure Blob Storage connection successful!")
    except Exception as e:
        print(f"Error connecting to Azure Blob Storage: {e}")


# Call the function to check the connection
check_azure_connection()


def upload_to_azure_blob(file, blob_name):
    try:
        container_client = BLOB_SERVICE_CLIENT.get_container_client(CONTAINER_NAME)
        blob_client = container_client.get_blob_client(blob=blob_name)
        blob_client.upload_blob(file)
        print(f"File {blob_name} uploaded successfully to Azure Blob Storage!")
    except Exception as e:
        print(f"Error uploading file to Azure Blob Storage: {e}")


def upload_file(request):
    check_azure_connection()
    if request.method == "POST":
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            image_file = request.FILES.get("image")
            executable_file = request.FILES.get("executable")

            upload_to_azure_blob(
                image_file, "image_blob_name.jpg"
            )  # Replace "image_blob_name.jpg" with the desired blob name
            upload_to_azure_blob(
                executable_file, "executable_blob_name.exe"
            )  # Replace "executable_blob_name.exe" with the desired blob name
    else:
        form = UploadFileForm()

    return render(request, "core/obfuscator.html", {"form": form})


# Create your views here.


def index(request):
    return render(request, "core/index.html")


def obfuscator(request):
    return render(request, "core/obfuscator.html")


def deobfuscator(request):
    return render(request, "core/deobfuscator.html")
